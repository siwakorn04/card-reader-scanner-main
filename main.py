from read_card import SmartCard, APDUCommand, select_reader, thai2unicode
from docx import Document
from datetime import datetime
import sys

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏° .docx (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö placeholder ‡∏Ç‡πâ‡∏≤‡∏° run)
def fill_medical_certificate(input_docx, output_docx, data):
    doc = Document(input_docx)

    def replace_in_paragraph(paragraph):
        full_text = ''.join(run.text for run in paragraph.runs)
        for key, val in data.items():
            if key in full_text:
                new_text = full_text.replace(key, val)
                for run in paragraph.runs:
                    run.text = ''
                if paragraph.runs:
                    paragraph.runs[0].text = new_text
                else:
                    paragraph.add_run(new_text)

    # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏¢‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤
    for para in doc.paragraphs:
        replace_in_paragraph(para)

    # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                for para in cell.paragraphs:
                    replace_in_paragraph(para)

    doc.save(output_docx)
    print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÅ‡∏•‡πâ‡∏ß:", output_docx)

# üîÅ ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å YYYYMMDD ‚Üí 19 ‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå 2547
def format_thai_date(yyyymmdd):
    try:
        year = int(yyyymmdd[:4])
        month = int(yyyymmdd[4:6])
        day = int(yyyymmdd[6:8])
        thai_months = [
            "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
            "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"
        ]
        return f"{day} {thai_months[month - 1]} {year}"
    except:
        return yyyymmdd

# üöÄ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
def main():
    try:
        reader = select_reader()
        if reader is None:
            sys.exit(1)

        conn = reader.createConnection()
        card = SmartCard(conn)
        card.connect()
        card.initialize()

        # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ï‡∏£
        commands = {
            "CID": APDUCommand([0x80, 0xB0, 0x00, 0x04, 0x02, 0x00, 0x0D], "CID"),
            "TH Fullname": APDUCommand([0x80, 0xB0, 0x00, 0x11, 0x02, 0x00, 0x64], "TH Fullname"),
            "Date of birth": APDUCommand([0x80, 0xB0, 0x00, 0xD9, 0x02, 0x00, 0x08], "Date of birth"),
            "Address": APDUCommand([0x80, 0xB0, 0x15, 0x79, 0x02, 0x00, 0x64], "Address"),
        }

        card_data = {}
        for key, cmd in commands.items():
            card_data[key] = card.read_field(cmd)

        # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô
        today_thai = format_thai_date(datetime.today().strftime("%Y%m%d"))
        dob = format_thai_date(card_data.get("Date of birth", ""))

        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏Å‡∏•‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
        data = {
            "{{‡∏ä‡∏∑‡πà‡∏≠}}": card_data.get("TH Fullname", ""),
            "{{‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£}}": card_data.get("CID", ""),
            "{{‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà}}": card_data.get("Address", ""),
            "{{‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î}}": dob,
            "{{‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à}}": today_thai,
            "{{‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å}}": today_thai
        }

        input_doc = "‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡∏∫‡πå(‡πÉ‡∏¢‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ) ‡∏ö‡∏±‡∏ß‡πÉ‡∏´‡∏ç‡πà test.docx"
        output_doc = "‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå_‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß.docx"
        fill_medical_certificate(input_doc, output_doc, data)

    except Exception as e:
        print("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", e)

if __name__ == "__main__":
    main()
